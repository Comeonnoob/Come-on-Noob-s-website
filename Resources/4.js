const f="modulepreload",d=function(o,r){return new URL(o,r).href},h={},E=function(r,t,c){if(!t||t.length===0)return r();const a=document.getElementsByTagName("link");return Promise.all(t.map(e=>{if(e=d(e,c),e in h)return;h[e]=!0;const s=e.endsWith(".css"),u=s?'[rel="stylesheet"]':"";if(!!c)for(let i=a.length-1;i>=0;i--){const l=a[i];if(l.href===e&&(!s||l.rel==="stylesheet"))return}else if(document.querySelector(`link[href="${e}"]${u}`))return;const n=document.createElement("link");if(n.rel=s?"stylesheet":f,s||(n.as="script",n.crossOrigin=""),n.href=e,document.head.appendChild(n),s)return new Promise((i,l)=>{n.addEventListener("load",i),n.addEventListener("error",()=>l(new Error(`Unable to preload CSS for ${e}`)))})})).then(()=>r()).catch(e=>{const s=new Event("vite:preloadError",{cancelable:!0});if(s.payload=e,window.dispatchEvent(s),!s.defaultPrevented)throw e})};let g=class{constructor(r,t){this.status=r,typeof t=="string"?this.body={message:t}:t?this.body=t:this.body={message:`Error: ${r}`}}toString(){return JSON.stringify(this.body)}},y=class{constructor(r,t){this.status=r,this.location=t}};export{g as H,y as R,E as _};
